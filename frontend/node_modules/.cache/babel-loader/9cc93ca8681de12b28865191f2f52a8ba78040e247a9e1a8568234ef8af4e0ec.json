{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u041C\\u0438\\u0445\\u0430\\u0438\\u043B\\\\EnergyCostSavingEstimator\\\\frontend\\\\src\\\\pages\\\\Devices.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../App.css';\n\n// Component to manage rooms: list existing, add new by selecting a type\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function RoomsPage() {\n  _s();\n  const [rooms, setRooms] = useState([]);\n  const [showForm, setShowForm] = useState(false);\n  const [selectedType, setSelectedType] = useState('');\n\n  // Enum of available room types\n  const roomTypes = [{\n    value: 'BEDROOM',\n    label: 'Спальня'\n  }, {\n    value: 'KITCHEN',\n    label: 'Кухня'\n  }, {\n    value: 'DINING_ROOM',\n    label: 'Столовая'\n  }, {\n    value: 'BATHROOM',\n    label: 'Ванная'\n  }, {\n    value: 'LIVING_ROOM',\n    label: 'Гостиная'\n  }, {\n    value: 'OFFICE',\n    label: 'Офис'\n  }];\n  const handleAddClick = () => {\n    setShowForm(true);\n  };\n  const handleCreate = async () => {\n    if (!selectedType) {\n      alert('Пожалуйста, выберите тип комнаты');\n      return;\n    }\n    try {\n      const response = await fetch('/rooms', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n          // TODO: добавить заголовок авторизации, если нужен токен\n          // 'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          type: selectedType\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Ошибка создания: ${response.statusText}`);\n      }\n      const newRoom = await response.json();\n      // Добавляем созданную комнату в список\n      setRooms(prev => [...prev, newRoom]);\n      // Скрываем форму и сбрасываем выбор\n      setShowForm(false);\n      setSelectedType('');\n    } catch (err) {\n      console.error(err);\n      alert('Не удалось создать комнату');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"table\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u041C\\u043E\\u0438 \\u043A\\u043E\\u043C\\u043D\\u0430\\u0442\\u044B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"devices-list\",\n      children: rooms.map(room => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"device-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: room.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u0422\\u0438\\u043F: \", room.type]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)]\n      }, room.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), showForm ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"room-type\",\n        children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0442\\u0438\\u043F \\u043A\\u043E\\u043C\\u043D\\u0430\\u0442\\u044B:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"room-type\",\n        value: selectedType,\n        onChange: e => setSelectedType(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"-- \\u0432\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), roomTypes.map(rt => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: rt.value,\n          children: rt.label\n        }, rt.value, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCreate,\n        children: \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u043A\\u043E\\u043C\\u043D\\u0430\\u0442\\u0443\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddClick,\n      children: \"+ \\u041D\\u043E\\u0432\\u0430\\u044F \\u043A\\u043E\\u043C\\u043D\\u0430\\u0442\\u0430\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(RoomsPage, \"6ldrZHvyCJqViQqcNldsA0iwKUY=\");\n_c = RoomsPage;\nvar _c;\n$RefreshReg$(_c, \"RoomsPage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","RoomsPage","_s","rooms","setRooms","showForm","setShowForm","selectedType","setSelectedType","roomTypes","value","label","handleAddClick","handleCreate","alert","response","fetch","method","headers","body","JSON","stringify","type","ok","Error","statusText","newRoom","json","prev","err","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","room","name","id","htmlFor","onChange","e","target","rt","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Михаил/EnergyCostSavingEstimator/frontend/src/pages/Devices.js"],"sourcesContent":["import React, { useState } from 'react';\nimport '../App.css';\n\n// Component to manage rooms: list existing, add new by selecting a type\nexport default function RoomsPage() {\n  const [rooms, setRooms] = useState([]);\n  const [showForm, setShowForm] = useState(false);\n  const [selectedType, setSelectedType] = useState('');\n\n  // Enum of available room types\n  const roomTypes = [\n    { value: 'BEDROOM', label: 'Спальня' },\n    { value: 'KITCHEN', label: 'Кухня' },\n    { value: 'DINING_ROOM', label: 'Столовая' },\n    { value: 'BATHROOM', label: 'Ванная' },\n    { value: 'LIVING_ROOM', label: 'Гостиная' },\n    { value: 'OFFICE', label: 'Офис' },\n  ];\n\n  const handleAddClick = () => {\n    setShowForm(true);\n  };\n\n  const handleCreate = async () => {\n    if (!selectedType) {\n      alert('Пожалуйста, выберите тип комнаты');\n      return;\n    }\n\n    try {\n      const response = await fetch('/rooms', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          // TODO: добавить заголовок авторизации, если нужен токен\n          // 'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({ type: selectedType }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Ошибка создания: ${response.statusText}`);\n      }\n\n      const newRoom = await response.json();\n      // Добавляем созданную комнату в список\n      setRooms(prev => [...prev, newRoom]);\n      // Скрываем форму и сбрасываем выбор\n      setShowForm(false);\n      setSelectedType('');\n    } catch (err) {\n      console.error(err);\n      alert('Не удалось создать комнату');\n    }\n  };\n\n  return (\n    <div className=\"table\">\n      <h1>Мои комнаты</h1>\n      <div className=\"devices-list\">\n        {rooms.map(room => (\n          <div key={room.id} className=\"device-card\">\n            <p>{room.name}</p>\n            <p>Тип: {room.type}</p>\n          </div>\n        ))}\n      </div>\n\n      {showForm ? (\n        <>\n          <label htmlFor=\"room-type\">Выберите тип комнаты:</label>\n          <select\n            id=\"room-type\"\n            value={selectedType}\n            onChange={e => setSelectedType(e.target.value)}\n          >\n            <option value=\"\">-- выберите --</option>\n            {roomTypes.map(rt => (\n              <option key={rt.value} value={rt.value}>\n                {rt.label}\n              </option>\n            ))}\n          </select>\n          <button onClick={handleCreate}>Создать комнату</button>\n        </>\n      ) : (\n        <button onClick={handleAddClick}>+ Новая комната</button>\n      )}\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}